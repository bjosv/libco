name: CI

on: [push, pull_request]

jobs:
  build:
    name: clang-${{ matrix.clang-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        clang-version: [5, 7, 9, 11, 13, 15, 16]
    steps:
      - uses: actions/checkout@v3
      - name: Setup Clang
        uses: aminya/setup-cpp@v1
        with:
          llvm: ${{ matrix.clang-version }}
      - name: Build
        working-directory: doc/examples
        run: |
          clang --version
          clang   -Wall -I../.. -o libco.o -c ../../libco.c
          clang++ -Wall -I../.. -c test_timing.cpp
          clang++  -o test_timing libco.o test_timing.o
          clang++ -Wall -I../.. -c test_args.cpp
          clang++ -o test_args libco.o test_args.o
          clang++ -Wall -std=c++11 -I../.. -c test_serialization.cpp
          clang++ -o test_serialization libco.o test_serialization.o

  # build-qemu:
  #   name: ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: arm
  #           arch: armv7
  #         - target: aarch64
  #           arch: aarch64
  #         - target: ppc64v2
  #           arch: ppc64le
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: uraimo/run-on-arch-action@v2
  #       with:
  #         arch: ${{ matrix.arch }}
  #         distro: ubuntu_latest
  #         install: |
  #           apt-get update -q -y
  #           apt-get install -q -y --no-install-recommends build-essential valgrind
  #         env: |
  #           target: ${{ matrix.target }}
  #         run: |
  #           cd doc/examples
  #           ./build.sh
  #           ./test_args
  #           ./test_timing
  #           ./test_serialization;
  #           # Temporary removed, fails:
  #           if [ "$target" != "arm" ]; then
  #             valgrind --error-exitcode=99 ./test_args
  #           fi
  #           # Temporary removed, very slow:
  #           # valgrind --error-exitcode=99 ./test_timing
  #           # Temporary removed, indicates issues
  #           # valgrind --error-exitcode=99 ./test_serialization

  # build-posix:
  #   name: ${{ matrix.name }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - name: setjmp
  #           file: sjlj.c
  #           defines: -D_FORTIFY_SOURCE=0
  #         - name: ucontext
  #           file: ucontext.c
  #           defines:
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Prepare
  #       run: |
  #         sudo apt-get install -y valgrind
  #     - name: Build
  #       working-directory: doc/examples
  #       env:
  #         FLAGS: -O3 -fomit-frame-pointer
  #       run: |
  #         cc ${{ matrix.defines }} $FLAGS -I../.. -o libco.o -c ../../${{ matrix.file }}
  #         c++ $FLAGS -I../.. -c test_timing.cpp
  #         c++ $FLAGS -o test_timing libco.o test_timing.o
  #         c++ $FLAGS -I../.. -c test_args.cpp
  #         c++ $FLAGS -o test_args libco.o test_args.o
  #         # Serialization not supported
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args
  #         # Not run for ucontext, very slow:
  #         if [ "${{ matrix.name }}" != "ucontext" ]; then
  #           ./test_timing
  #         fi
  #     - name: Run valgrind
  #       # Temporary removed for setjmp, needs corrections
  #       if: ${{ matrix.name == 'ucontext' }}
  #       working-directory: doc/examples
  #       run: |
  #         valgrind --error-exitcode=99 ./test_args
  #         # Temporary removed, very slow:
  #         # valgrind --error-exitcode=99 ./test_timing

  # build-windows:
  #   name: Windows (amd64)
  #   runs-on: windows-latest
  #   steps:
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: actions/checkout@v3
  #     - name: Build
  #       working-directory: doc/examples
  #       run: |
  #         # __STDC__ required for `alignas` (or using /Za)
  #         cl /I ../.. /D LIBCO_MPROTECT /Zc:__STDC__ /c ../../libco.c
  #         cl /I ../.. test_args.cpp libco.obj
  #         cl /I ../.. test_timing.cpp libco.obj
  #         # Skip test_serialization that uses sys/mman.h
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args.exe
  #         ./test_timing.exe

  # build-windows-fibers:
  #   name: Windows (fibers)
  #   runs-on: windows-latest
  #   steps:
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: actions/checkout@v3
  #     - name: Build
  #       working-directory: doc/examples
  #       run: |
  #         # __STDC__ required for `alignas` (or using /Za)
  #         cl /I ../.. /D LIBCO_MPROTECT /Zc:__STDC__ /Folibco /c ../../fiber.c
  #         cl /I ../.. test_args.cpp libco.obj
  #         cl /I ../.. test_timing.cpp libco.obj
  #         # Skip test_serialization that uses sys/mman.h
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args.exe
  #         ./test_timing.exe

  # sanitizers:
  #   name: ${{ matrix.sanitizer }}-sanitizer
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       sanitizer: [thread, undefined, leak, address]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Build and run examples
  #       working-directory: doc/examples
  #       env:
  #         FLAGS: -fsanitize=${{ matrix.sanitizer }} -fno-sanitize-recover=all -fno-omit-frame-pointer
  #       run: |
  #         clang $FLAGS -I../.. -o libco.o -c ../../libco.c
  #         clang++ $FLAGS -I../.. -c test_timing.cpp
  #         clang++ $FLAGS -o test_timing libco.o test_timing.o
  #         clang++ $FLAGS -I../.. -c test_args.cpp
  #         clang++ $FLAGS -o test_args libco.o test_args.o
  #         clang++ $FLAGS -I../.. -c test_serialization.cpp
  #         clang++ $FLAGS -o test_serialization libco.o test_serialization.o
  #         ./test_args
  #         ./test_timing
  #         ./test_serialization
