name: CI

on: [push, pull_request]

jobs:
  # build:
  #   name: ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: amd64
  #           flags: -O3 -fomit-frame-pointer
  #         - target: x86
  #           flags: -m32 -O3 -fomit-frame-pointer
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Prepare
  #       run: |
  #         sudo dpkg --add-architecture i386
  #         sudo apt-get update -q -y
  #         sudo apt-get install -y gcc-multilib g++-multilib valgrind libc6-dbg libc6-dbg:i386
  #     - name: Build
  #       working-directory: doc/examples
  #       run: |
  #         cc ${{ matrix.flags }} -I../.. -o libco.o -c ../../libco.c
  #         c++ ${{ matrix.flags }} -I../.. -c test_timing.cpp
  #         c++ ${{ matrix.flags }} -o test_timing libco.o test_timing.o
  #         c++ ${{ matrix.flags }} -I../.. -c test_args.cpp
  #         c++ ${{ matrix.flags }} -o test_args libco.o test_args.o
  #         c++ ${{ matrix.flags }} -I../.. -c test_serialization.cpp
  #         c++ ${{ matrix.flags }} -o test_serialization libco.o test_serialization.o
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args
  #         ./test_timing
  #         ./test_serialization
  #     - name: Run valgrind
  #       working-directory: doc/examples
  #       run: |
  #         ./valgrind-wrapper.sh --expect-failure ./test_args
  #         ./valgrind-wrapper.sh --expect-failure ./test_timing
  #         ./valgrind-wrapper.sh --expect-failure ./test_serialization

  # build-qemu:
  #   name: ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: arm
  #           arch: armv7
  #         - target: aarch64
  #           arch: aarch64
  #         - target: ppc64v2
  #           arch: ppc64le
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: uraimo/run-on-arch-action@v2
  #       with:
  #         arch: ${{ matrix.arch }}
  #         distro: ubuntu_latest
  #         install: |
  #           apt-get update -q -y
  #           apt-get install -q -y --no-install-recommends build-essential valgrind
  #         run: |
  #           cd doc/examples
  #           ./build.sh
  #           ./test_args
  #           ./test_timing
  #           ./test_serialization
  #           ./valgrind-wrapper.sh --expect-failure ./test_args
  #           ./valgrind-wrapper.sh --expect-failure ./test_serialization
  #           # test_timing not run with valgrind on qemu since it's very slow.

  build-qemu-ppc-2:
    name: ppc with valgrind build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        run: |
          sudo apt-get update -q -y
          sudo apt-get install -y qemu binfmt-support qemu-user-static
      - uses: addnab/docker-run-action@v3
        with:
          image: multiarch/qemu-user-static:register
          options: --privileged
      - uses: addnab/docker-run-action@v3
        with:
          image: lpenz/debian-jessie-powerpc:latest
          options: -v ${{ github.workspace }}:/work -e QEMU_STACK_SIZE=8388608
          run: |
            sed -i 's;http://deb.debian.org;http://archive.debian.org;' /etc/apt/sources.list
            apt-get update -q -y
            apt-get install -y --allow-unauthenticated build-essential valgrind autotools-dev automake git
            git config --global http.sslVerify false
            git clone https://sourceware.org/git/valgrind.git
            cd valgrind
            sed -i 's/if (0)/if (1)/' coregrind/m_initimg/initimg-linux.c
            sed -i 's/if ((!ok) || sr_isError(res)) {/if (!ok) VG_(printf)("> NOT OK\\n"); if (sr_isError(res)) VG_(printf)("> isError(res)\\n"); if ((!ok) || sr_isError(res)) {/' coregrind/m_initimg/initimg-linux.c
            sed -i 's/ res = VG_(am_mmap_anon_fixed_client)(/VG_(printf)("am_create_reservation = ok\\n");res = VG_(am_mmap_anon_fixed_client)(/' coregrind/m_initimg/initimg-linux.c

            sed -i 's/if (startI != endI)/VG_(printf)("> Check segment start=%d end=%d start2=%#lx end2=%#lx\\n", startI, endI, start2, end2); if (startI != endI)/' coregrind/m_aspacemgr/aspacemgr-linux.c
            sed -i 's/if (nsegments[startI].kind != SkFree)/VG_(printf)("> Check free\\n"); if (nsegments[startI].kind != SkFree)/' coregrind/m_aspacemgr/aspacemgr-linux.c
            git diff
            ./autogen.sh
            ./configure
            make
            pwd
            cd /work/doc/examples
            ./build.sh
            ./test_args
            /valgrind/vg-in-place -d -d -d --main-stacksize=8388608 ./test_args

  build-qemu-ppc:
    name: ppc
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Prepare
        run: |
          sudo apt-get update -q -y
          sudo apt-get install -y qemu binfmt-support qemu-user-static
      - uses: addnab/docker-run-action@v3
        with:
          image: multiarch/qemu-user-static:register
          options: --privileged
      - uses: addnab/docker-run-action@v3
        with:
          image: lpenz/debian-jessie-powerpc:latest
          options: -v ${{ github.workspace }}:/work -e QEMU_STACK_SIZE=8388608
          run: |
            sed -i 's;http://deb.debian.org;http://archive.debian.org;' /etc/apt/sources.list
            apt-get update -q -y
            apt-get install -y --allow-unauthenticated build-essential valgrind
            cd /work/doc/examples
            ./build.sh
            ./test_args
            ./test_timing
            valgrind -d ./test_args
            echo "--------"
            valgrind -d --main-stacksize=8388608 ./test_args
            # Serialization not supported
            # valgrind ls
            #valgrind -d --main-stacksize=8388608 ./test_args
            # ./valgrind-wrapper.sh ./test_args
            # ./valgrind-wrapper.sh ./test_timing

  # build-posix:
  #   name: ${{ matrix.target }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - target: setjmp
  #           file: sjlj.c
  #           defines: -D_FORTIFY_SOURCE=0
  #         - target: ucontext
  #           file: ucontext.c
  #           defines:
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Prepare
  #       run: |
  #         sudo apt-get install -y valgrind
  #     - name: Build
  #       working-directory: doc/examples
  #       env:
  #         FLAGS: -O3 -fomit-frame-pointer
  #       run: |
  #         cc ${{ matrix.defines }} $FLAGS -I../.. -o libco.o -c ../../${{ matrix.file }}
  #         c++ $FLAGS -I../.. -c test_timing.cpp
  #         c++ $FLAGS -o test_timing libco.o test_timing.o
  #         c++ $FLAGS -I../.. -c test_args.cpp
  #         c++ $FLAGS -o test_args libco.o test_args.o
  #         # Serialization not supported
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args
  #         # test_timing not run for ucontext since it's very slow.
  #         if [ "${{ matrix.target }}" != "ucontext" ]; then
  #           ./test_timing
  #         fi
  #     - name: Run valgrind
  #       working-directory: doc/examples
  #       run: |
  #         ./valgrind-wrapper.sh --expect-failure ./test_args
  #         # test_timing not run for ucontext since it's very slow.
  #         if [ "${{ matrix.target }}" != "ucontext" ]; then
  #           ./valgrind-wrapper.sh --expect-failure ./test_timing
  #         fi

  # build-windows:
  #   name: Windows (${{ matrix.arch }})
  #   runs-on: windows-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       arch: [amd64, x86]
  #   steps:
  #     - uses: ilammy/msvc-dev-cmd@v1
  #       with:
  #         arch: ${{ matrix.arch }}
  #     - uses: actions/checkout@v3
  #     - name: Build
  #       working-directory: doc/examples
  #       run: |
  #         # __STDC__ required for `alignas` (or using /Za)
  #         cl /I ../.. /D LIBCO_MPROTECT /Zc:__STDC__ /c ../../libco.c
  #         cl /I ../.. test_args.cpp libco.obj
  #         cl /I ../.. test_timing.cpp libco.obj
  #         cl /I ../.. test_serialization.cpp libco.obj
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args.exe
  #         ./test_timing.exe
  #         ./test_serialization

  # build-windows-fibers:
  #   name: Windows (fibers)
  #   runs-on: windows-latest
  #   steps:
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - uses: actions/checkout@v3
  #     - name: Build
  #       working-directory: doc/examples
  #       run: |
  #         # __STDC__ required for `alignas` (or using /Za)
  #         cl /I ../.. /D LIBCO_MPROTECT /Zc:__STDC__ /Folibco /c ../../fiber.c
  #         cl /I ../.. test_args.cpp libco.obj
  #         cl /I ../.. test_timing.cpp libco.obj
  #         # Serialization not supported
  #     - name: Run examples
  #       working-directory: doc/examples
  #       run: |
  #         ./test_args.exe
  #         ./test_timing.exe

  # sanitizers:
  #   name: ${{ matrix.sanitizer }}-sanitizer
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       sanitizer: [thread, undefined, leak, address]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Build and run examples
  #       working-directory: doc/examples
  #       env:
  #         FLAGS: -fsanitize=${{ matrix.sanitizer }} -fno-sanitize-recover=all -fno-omit-frame-pointer
  #       run: |
  #         clang $FLAGS -I../.. -o libco.o -c ../../libco.c
  #         clang++ $FLAGS -I../.. -c test_timing.cpp
  #         clang++ $FLAGS -o test_timing libco.o test_timing.o
  #         clang++ $FLAGS -I../.. -c test_args.cpp
  #         clang++ $FLAGS -o test_args libco.o test_args.o
  #         clang++ $FLAGS -I../.. -c test_serialization.cpp
  #         clang++ $FLAGS -o test_serialization libco.o test_serialization.o
  #         ./test_args
  #         ./test_timing
  #         ./test_serialization
